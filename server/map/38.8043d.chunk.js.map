{"version":3,"sources":["webpack:///./src/test-cases/TableInfinity/TableInfinity.js"],"names":["CheckboxGroup","antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_3___default","a","Group","list","Array","fill","map","name","description","TableInfinity","state","page","loading","columns","label","dataKey","width","render","_ref","cellData","react__WEBPACK_IMPORTED_MODULE_4___default","createElement","style","color","show","antd_lib_button__WEBPACK_IMPORTED_MODULE_1___default","handleChange","checkedValues","_toConsumableArray","_this","forEach","column","includes","setState","_this$state","this","columnKeys","options","defaultValue","onChange","react_virtualized__WEBPACK_IMPORTED_MODULE_6__","height","headerHeight","rowHeight","rowCount","length","rowGetter","_ref2","index","headerStyle","padding","cellRenderer","Component","propTypes","__webpack_exports__"],"mappings":"m4GAOA,IAAMA,cAAgBC,uDAAAC,EAASC,MAEzBC,KAAOC,MAAM,KAAKC,KAAK,GAAGC,IAAI,iBAAO,CAAEC,KAAM,eAAgBC,YAAa,uBAE1EC,6RACJC,MAAQ,CACNC,KAAM,EACNC,SAAS,EACTC,QAAS,CACP,CACEC,MAAO,OACPC,QAAS,OACTC,MAAO,IACPC,OAAQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACNC,2CAAAnB,EAAAoB,cAAA,OAAKC,MAAO,CAAEC,MAAO,QAClBJ,IAGLK,MAAM,GACL,CACDV,MAAO,cACPC,QAAS,cACTC,MAAO,IACPQ,MAAM,GACL,CACDV,MAAO,SACPC,QAAS,SACTC,MAAO,IACPC,OAAQ,kBAAMG,2CAAAnB,EAAAoB,cAAAI,qDAAAxB,EAAA,eACduB,MAAM,OAKZE,aAAe,SAACC,GACd,IAAMd,EAAOe,mBAAOC,EAAKnB,MAAMG,SAC/BA,EAAQiB,QAAQ,SAACC,GACXJ,EAAcK,SAASD,EAAOhB,SAChCgB,EAAOP,MAAO,EAEdO,EAAOP,MAAO,IAGlBK,EAAKI,SAAS,CACZpB,qHAKK,IAAAqB,EAGHC,KAAKzB,MADQG,GAFVqB,EAELvB,KAFKuB,EAECtB,QAFDsB,EAEUrB,SAFVqB,EAEmBE,WAE1B,OACEhB,2CAAAnB,EAAAoB,cAAA,WACED,2CAAAnB,EAAAoB,cAACtB,cAAD,CAAesC,QAASxB,EAAQP,IAAI,SAAAyB,GAAM,OAAIA,EAAOhB,UAAUuB,aAAczB,EAAQP,IAAI,SAAAyB,GAAM,OAAIA,EAAOhB,UAAUwB,SAAUJ,KAAKT,eACnIN,2CAAAnB,EAAAoB,cAACmB,+CAAA,EAAD,CACExB,MAAO,IACPyB,OAAQ,IACRC,aAAc,GACdC,UAAW,GACXC,SAAUzC,KAAK0C,OACfC,UAAW,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAH,OAAe7C,KAAK6C,KAG/BnC,EAAQP,IAAI,SAAAyB,GAAM,OAChBA,EAAOP,MACLJ,2CAAAnB,EAAAoB,cAACmB,+CAAA,EAAD,CACES,YAAa,CAAEC,QAAS,IACxB5B,MAAO,CAAE4B,QAAS,IAClBC,aAAcpB,EAAOd,OACrBH,MAAOiB,EAAOjB,MACdC,QAASgB,EAAOhB,QAChBC,MAAOe,EAAOf,wJArEFoC,8CAgF5B3C,cAAc4C,UAAY,gBAIX5C,yCAAA6C,oBAAA,wKAxFTvD,8IAEAI,4HAEAM","file":"app/chunks/38.8043d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Spin, Button, Checkbox } from 'antd';\r\nimport { Column, Table } from 'react-virtualized';\r\n\r\n// import 'react-virtualized/styles.css';\r\n// only needs to be imported once\r\nconst CheckboxGroup = Checkbox.Group;\r\n// Table data as an array of objects\r\nconst list = Array(100).fill(0).map(() => ({ name: 'Brian Vaughn', description: 'Software engineer' }));\r\n\r\nclass TableInfinity extends Component {\r\n  state = {\r\n    page: 1,\r\n    loading: false,\r\n    columns: [\r\n      {\r\n        label: 'Name',\r\n        dataKey: 'name',\r\n        width: 150,\r\n        render: ({ cellData }) => (\r\n          <div style={{ color: 'red' }}>\r\n            {cellData}\r\n          </div>\r\n        ),\r\n        show: true,\r\n      }, {\r\n        label: 'Description',\r\n        dataKey: 'description',\r\n        width: 250,\r\n        show: true,\r\n      }, {\r\n        label: 'Action',\r\n        dataKey: 'action',\r\n        width: 200,\r\n        render: () => <Button>click</Button>,\r\n        show: true,\r\n      },\r\n    ],\r\n  };\r\n  \r\n  handleChange = (checkedValues) => {\r\n    const columns = [...this.state.columns];\r\n    columns.forEach((column) => {\r\n      if (checkedValues.includes(column.dataKey)) {\r\n        column.show = true;\r\n      } else {\r\n        column.show = false;\r\n      }\r\n    });    \r\n    this.setState({\r\n      columns,\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    const {\r\n      page, loading, columns, columnKeys,\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n        <CheckboxGroup options={columns.map(column => column.dataKey)} defaultValue={columns.map(column => column.dataKey)} onChange={this.handleChange} />\r\n        <Table\r\n          width={600}\r\n          height={300}\r\n          headerHeight={20}\r\n          rowHeight={30}\r\n          rowCount={list.length}\r\n          rowGetter={({ index }) => list[index]}\r\n        >\r\n          {\r\n          columns.map(column => (\r\n            column.show && (\r\n              <Column\r\n                headerStyle={{ padding: 16 }}\r\n                style={{ padding: 16 }}\r\n                cellRenderer={column.render}\r\n                label={column.label}\r\n                dataKey={column.dataKey}\r\n                width={column.width}\r\n              />            \r\n            )\r\n          ))\r\n        }\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTableInfinity.propTypes = {\r\n\r\n};\r\n\r\nexport default TableInfinity;\r\n"],"sourceRoot":""}